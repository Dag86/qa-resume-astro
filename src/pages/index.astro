---
import resume from "../data/resume.json";
import type { Resume } from "../types/resume";
const data = resume as Resume;

import Hero from "../components/Hero.astro";
import Highlights from "../components/Highlights.astro";
import Skills from "../components/Skills.astro";
import Experience from "../components/Experience.astro";
import Projects from "../components/Projects.astro";
import Education from "../components/Education.astro";
import Strengths from "../components/Strengths.astro";
import TestAndCI from "../components/TestAndCI.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.css";
import MiniTestRunner from "../components/MiniTestRunner.astro";

// JSON-LD object
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: data.name,
  jobTitle: data.title,
  email: data.contacts.email,
  telephone: data.contacts.phone,
  address: {
    "@type": "PostalAddress",
    addressLocality: data.location,
  },
  sameAs: [data.contacts.linkedin, data.contacts.github],
};
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Amir Choshov – QA Engineer (Web & Mobile Automation)</title>
    <meta
      name="description"
      content="QA Engineer specializing in RBAC, automation, and CI/CD."
    />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <!-- Inter Variable: fast, readable, modern. One font keeps payload tiny. -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Apply stored/OS theme early -->
    <script>
      (function initTheme() {
        try {
          const t = localStorage.getItem("theme");
          const prefersLight = matchMedia(
            "(prefers-color-scheme: light)",
          ).matches;
          document.documentElement.setAttribute(
            "data-theme",
            t || (prefersLight ? "light" : "dark"),
          );
        } catch {
          /* ignore */ void 0;
        }
      })();
    </script>

    <!-- JSON-LD -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(jsonLd)}
    />
  </head>
  <body>
    <a class="skip-to-content" href="#main">Skip to content</a>

    <main id="main" tabindex="-1">
      <Hero
        name={data.name}
        title={data.title}
        location={data.location}
        contacts={data.contacts}
        summary={data.summary}
      />

      <Highlights items={data.highlights} />
      <Skills data={data.skills} />

      <Experience experience={data.experience} />

      <Projects projects={data.projects} />
      <Education
        degree={data.education.degree}
        institution={data.education.institution}
      />
      <Strengths items={data.strengths} />
      <TestAndCI />
      
    </main>

    <Footer lastUpdated={data.lastUpdated} />

    <script defer>
  // Theme toggle
  const btn = document.querySelector('[data-testid="theme-toggle"]');
  if (btn) {
    btn.addEventListener("click", () => {
      const cur = document.documentElement.getAttribute("data-theme") || "dark";
      const next = cur === "dark" ? "light" : "dark";
      document.documentElement.setAttribute("data-theme", next);
      try { localStorage.setItem("theme", next); } catch {}
    });
  }

  // -------- Mini test runner + report export (JSON + JUnit) ----------
  const runBtn = document.querySelector('[data-testid="run-tests"]');
  const log = document.querySelector('[data-testid="test-log"]');
  const live = document.querySelector('[data-testid="aria-live"]');
  const exportJsonBtn = document.querySelector('[data-testid="export-report"]');
  const exportJunitBtn = document.querySelector('[data-testid="export-junit"]');

  /** Keep the latest run here for export */
  let lastRun = null;

  function download(name, mime, text) {
    const blob = new Blob([text], { type: mime });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = name;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function toJUnitXML(report) {
    // Minimal JUnit XML for CI consumption
    const total = report.tests.length;
    const failures = report.tests.filter(t => t.status === "FAIL").length;
    const timeSec = (report.durationMs / 1000).toFixed(3);
    const cases = report.tests.map(t => {
      const tSec = (t.durationMs / 1000).toFixed(3);
      const fail = t.status === "FAIL" ? `<failure message="Assertion failed"/>` : "";
      return `<testcase classname="MiniRunner" name="${t.name}" time="${tSec}">${fail}</testcase>`;
    }).join("");
    return `<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="MiniRunner" tests="${total}" failures="${failures}" time="${timeSec}">
${cases}
</testsuite>`;
  }

  function enableExports(enabled) {
    if (exportJsonBtn) exportJsonBtn.disabled = !enabled;
    if (exportJunitBtn) exportJunitBtn.disabled = !enabled;
  }

  if (runBtn && log && live) {
    runBtn.addEventListener("click", () => {
      log.innerHTML = "";
      runBtn.disabled = true;
      enableExports(false);

      const scriptVersion = 1; // bump if you change the format
      const startedAt = new Date();
      live.textContent = "Starting 3 tests…";

      const tests = [
        { name: "Login redirects", delayMs: 300, status: "PASS" },
        { name: "RBAC for Admin", delayMs: 340, status: "PASS" },
        { name: "Report export",  delayMs: 320, status: "FAIL" }
      ];

      let pass = 0;
      const results = [];

      tests.forEach((t, i) => {
        setTimeout(() => {
          const started = performance.now();
          // In a real runner you'd execute; here it's fixed status:
          const ok = t.status === "PASS";
          const li = document.createElement("li");
          li.textContent = `${t.name} → ${t.status}`;
          li.className = ok ? "pass" : "fail";
          log.appendChild(li);
          live.textContent = `${t.name} ${ok ? "passed" : "failed"}.`;
          if (ok) pass++;

          const ended = performance.now();
          results.push({
            name: t.name,
            status: t.status,
            durationMs: Math.max(1, Math.round(ended - started))
          });

          if (i === tests.length - 1) {
            const summary = document.createElement("li");
            summary.className = "summary";
            summary.textContent = `Summary: ${pass}/${tests.length} tests passed.`;
            log.appendChild(summary);
            live.textContent = summary.textContent;

            const endedAt = new Date();
            const durationMs = endedAt - startedAt;

            lastRun = {
              schema: "mini-runner@v1",
              scriptVersion,
              startedAt: startedAt.toISOString(),
              endedAt: endedAt.toISOString(),
              durationMs,
              totals: { passed: pass, failed: tests.length - pass, total: tests.length },
              tests: results
            };

            runBtn.disabled = false;
            enableExports(true);
          }
        }, 220 * (i + 1));
      });
    });
  }

  if (exportJsonBtn) {
    exportJsonBtn.addEventListener("click", () => {
      if (!lastRun) return;
      const name = `test-report-${new Date(lastRun.startedAt).toISOString().replace(/[:.]/g, "-")}.json`;
      download(name, "application/json", JSON.stringify(lastRun, null, 2));
    });
  }

  if (exportJunitBtn) {
    exportJunitBtn.addEventListener("click", () => {
      if (!lastRun) return;
      const name = `junit-report-${new Date(lastRun.startedAt).toISOString().replace(/[:.]/g, "-")}.xml`;
      download(name, "application/xml", toJUnitXML(lastRun));
    });
  }
</script>

